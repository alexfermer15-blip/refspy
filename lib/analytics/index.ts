// lib/analytics/index.ts
// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∏ –º–µ—Ç—Ä–∏–∫

interface AnalyticsEvent {
  name: string
  properties?: Record<string, any>
  timestamp?: Date
}

class Analytics {
  private queue: AnalyticsEvent[] = []
  private isInitialized = false

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  init() {
    if (this.isInitialized) return
    this.isInitialized = true
    console.log('üìä Analytics initialized')
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
  track(name: string, properties?: Record<string, any>) {
    const event: AnalyticsEvent = {
      name,
      properties,
      timestamp: new Date()
    }

    this.queue.push(event)
    this.sendEvent(event)
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  page(path: string, properties?: Record<string, any>) {
    this.track('page_view', {
      path,
      ...properties
    })
  }

  // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  identify(userId: string, traits?: Record<string, any>) {
    this.track('user_identified', {
      userId,
      ...traits
    })
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è (–º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å Google Analytics, Mixpanel –∏ —Ç.–¥.)
  private async sendEvent(event: AnalyticsEvent) {
    if (process.env.NODE_ENV === 'development') {
      console.log('üìä Analytics Event:', event)
      return
    }

    // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
    try {
      // –ü—Ä–∏–º–µ—Ä –¥–ª—è Google Analytics
      if (typeof window !== 'undefined' && (window as any).gtag) {
        (window as any).gtag('event', event.name, event.properties)
      }
    } catch (error) {
      console.error('Analytics error:', error)
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏
  getQueue() {
    return this.queue
  }

  // –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
  clearQueue() {
    this.queue = []
  }
}

export const analytics = new Analytics()

// –•–µ–ª–ø–µ—Ä—ã –¥–ª—è —á–∞—Å—Ç—ã—Ö —Å–æ–±—ã—Ç–∏–π
export const trackEvent = {
  // –ü—Ä–æ–µ–∫—Ç—ã
  projectCreated: (projectId: string, projectName: string) => {
    analytics.track('project_created', { projectId, projectName })
  },
  projectDeleted: (projectId: string) => {
    analytics.track('project_deleted', { projectId })
  },
  projectViewed: (projectId: string) => {
    analytics.track('project_viewed', { projectId })
  },

  // –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã
  competitorsAnalyzed: (projectId: string, count: number) => {
    analytics.track('competitors_analyzed', { projectId, count })
  },
  competitorSelected: (competitorDomain: string) => {
    analytics.track('competitor_selected', { competitorDomain })
  },

  // –ë—ç–∫–ª–∏–Ω–∫–∏
  backlinksLoaded: (projectId: string, count: number) => {
    analytics.track('backlinks_loaded', { projectId, count })
  },
  backlinkExported: (projectId: string, format: string) => {
    analytics.track('backlink_exported', { projectId, format })
  },

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  userSignedUp: (userId: string, email: string) => {
    analytics.track('user_signed_up', { userId, email })
  },
  userLoggedIn: (userId: string) => {
    analytics.track('user_logged_in', { userId })
  },
  userLoggedOut: () => {
    analytics.track('user_logged_out')
  },

  // –û–ø–ª–∞—Ç–∞
  subscriptionUpgraded: (plan: string, userId: string) => {
    analytics.track('subscription_upgraded', { plan, userId })
  },
  paymentCompleted: (amount: number, currency: string) => {
    analytics.track('payment_completed', { amount, currency })
  }
}
