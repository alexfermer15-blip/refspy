// app/api/ai-plans/create/route.ts

import { NextRequest, NextResponse } from 'next/server'

interface GapOpportunity {
  source_domain: string
  competitor_count: number
  avg_dr: number
  total_links: number
  competitors: string[]
}

interface MarketplaceOffer {
  domain: string
  marketplace: string
  price: number
  currency: string
  dr: number
  link_type: string
}

interface TimelineItem {
  month: number
  action: string
  expected_links: number
}

interface BudgetItem {
  domain: string
  type: string
  priority: string
  cost: number
}

interface AIPlan {
  summary: string
  budget_breakdown: BudgetItem[]
  timeline: TimelineItem[]
  expected_results: {
    position_improvement: string
    estimated_traffic: string
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { project_id, opportunities, marketplace_offers, budget, keyword } = body

    if (!project_id || !opportunities || opportunities.length === 0) {
      return NextResponse.json(
        { success: false, error: 'Missing required fields' },
        { status: 400 }
      )
    }

    console.log('ü§ñ Creating AI Plan for project:', project_id)
    console.log('üí∞ Budget:', budget, 'RUB')
    console.log('üìä Opportunities:', opportunities.length)

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    const sortedOpportunities = [...opportunities].sort((a: GapOpportunity, b: GapOpportunity) => {
      if (b.competitor_count !== a.competitor_count) {
        return b.competitor_count - a.competitor_count
      }
      return b.avg_dr - a.avg_dr
    })

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –±—é–¥–∂–µ—Ç—É
    let remainingBudget = budget || 50000
    const selectedOffers: MarketplaceOffer[] = []
    const budgetBreakdown: BudgetItem[] = []

    marketplace_offers?.forEach((offer: MarketplaceOffer) => {
      if (offer.price <= remainingBudget && selectedOffers.length < 10) {
        selectedOffers.push(offer)
        remainingBudget -= offer.price

        budgetBreakdown.push({
          domain: offer.domain,
          type: `${offer.link_type} —Å—Å—ã–ª–∫–∞`,
          priority: offer.dr >= 70 ? '–í—ã—Å–æ–∫–∏–π' : offer.dr >= 40 ? '–°—Ä–µ–¥–Ω–∏–π' : '–ù–∏–∑–∫–∏–π',
          cost: offer.price
        })
      }
    })

    // –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–ª–∞–Ω (timeline)
    const timeline: TimelineItem[] = []
    const linksPerMonth = Math.ceil(selectedOffers.length / 6) // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤

    for (let month = 1; month <= 6; month++) {
      const startIdx = (month - 1) * linksPerMonth
      const endIdx = Math.min(month * linksPerMonth, selectedOffers.length)
      const monthOffers = selectedOffers.slice(startIdx, endIdx)

      if (monthOffers.length > 0) {
        timeline.push({
          month,
          action: `–ü–æ–ª—É—á–∏—Ç—å ${monthOffers.length} ${monthOffers.length === 1 ? '—Å—Å—ã–ª–∫—É' : '—Å—Å—ã–ª–∫–∏'} —Å —Å–∞–π—Ç–æ–≤: ${monthOffers.map(o => o.domain).slice(0, 3).join(', ')}${monthOffers.length > 3 ? ' –∏ –¥—Ä.' : ''}`,
          expected_links: monthOffers.length
        })
      }
    }

    // –ü—Ä–æ–≥–Ω–æ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const totalDR = selectedOffers.reduce((sum, offer) => sum + offer.dr, 0)
    const avgDR = totalDR / selectedOffers.length || 0
    const estimatedPositionImprovement = Math.min(Math.floor(avgDR / 10), 20)
    const estimatedTraffic = Math.floor(selectedOffers.length * avgDR * 5)

    const aiPlan: AIPlan = {
      summary: `–ü–ª–∞–Ω –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å—Å—ã–ª–æ—á–Ω–æ–π –º–∞—Å—Å—ã –¥–ª—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ "${keyword}". ` +
        `–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å ${selectedOffers.length} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ ` +
        `—Å–æ —Å—Ä–µ–¥–Ω–∏–º DR ${Math.round(avgDR)} –≤ —Ç–µ—á–µ–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤. ` +
        `–û–±—â–∏–π –±—é–¥–∂–µ—Ç: ${budget?.toLocaleString() || '50,000'} ‚ÇΩ. ` +
        `–û–∂–∏–¥–∞–µ–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π: ${estimatedPositionImprovement}+ –º–µ—Å—Ç.`,
      budget_breakdown: budgetBreakdown,
      timeline,
      expected_results: {
        position_improvement: `‚Üë ${estimatedPositionImprovement}+ –ø–æ–∑–∏—Ü–∏–π`,
        estimated_traffic: `+${estimatedTraffic.toLocaleString()} –≤–∏–∑–∏—Ç–æ–≤/–º–µ—Å`
      }
    }

    console.log('‚úÖ AI Plan created successfully!')
    console.log('üìä Selected offers:', selectedOffers.length)
    console.log('üí∞ Total cost:', budget - remainingBudget, 'RUB')

    return NextResponse.json({
      success: true,
      plan: aiPlan
    })

  } catch (error: any) {
    console.error('‚ùå AI Plan creation error:', error)
    return NextResponse.json(
      { success: false, error: error.message || 'Internal server error' },
      { status: 500 }
    )
  }
}
