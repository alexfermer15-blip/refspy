import { NextRequest, NextResponse } from 'next/server'
import { RankChecker } from '@/lib/services/rank-checker'
import { sendEmail, generatePositionChangeEmail } from '@/lib/services/email'
import { supabase } from '@/lib/supabase'

export async function GET(request: NextRequest) {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
  const authHeader = request.headers.get('authorization')
  const cronSecret = process.env.CRON_SECRET

  if (!cronSecret || authHeader !== `Bearer ${cronSecret}`) {
    return NextResponse.json(
      { error: 'Unauthorized' },
      { status: 401 }
    )
  }

  try {
    console.log('üöÄ Starting rank check cron job...')
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, email')
    
    if (usersError) {
      throw new Error(`Failed to fetch users: ${usersError.message}`)
    }

    if (!users || users.length === 0) {
      return NextResponse.json({
        success: true,
        message: 'No users to check',
        results: []
      })
    }

    const allResults = []

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (const user of users) {
      try {
        console.log(`üìä Checking keywords for user ${user.email}...`)
        
        const results = await RankChecker.checkUserKeywords(user.id)
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        const threshold = parseInt(process.env.SIGNIFICANT_CHANGE_THRESHOLD || '3')
        const significantChanges = results.filter(r => 
          Math.abs(r.change) >= threshold
        )
        
        if (significantChanges.length > 0) {
          console.log(`üìß Sending email to ${user.email} (${significantChanges.length} changes)`)
          
          const emailHtml = generatePositionChangeEmail(significantChanges)
          
          await sendEmail({
            to: user.email,
            subject: `RefSpy: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ ${significantChanges.length} –ø–æ–∑–∏—Ü–∏—è—Ö`,
            html: emailHtml
          })
        }
        
        allResults.push({
          userId: user.id,
          email: user.email,
          checked: results.length,
          significantChanges: significantChanges.length
        })
        
      } catch (error) {
        console.error(`Error checking user ${user.id}:`, error)
      }
    }

    console.log('‚úÖ Cron job completed successfully')

    return NextResponse.json({
      success: true,
      message: `Checked ${users.length} users`,
      results: allResults
    })

  } catch (error: any) {
    console.error('‚ùå Cron job error:', error)
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ–± –æ—à–∏–±–∫–µ
    if (process.env.ADMIN_EMAIL) {
      await sendEmail({
        to: process.env.ADMIN_EMAIL,
        subject: '‚ö†Ô∏è RefSpy: –û—à–∏–±–∫–∞ –≤ Cron Job',
        html: `
          <h2>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–∑–∏—Ü–∏–π</h2>
          <p><strong>–í—Ä–µ–º—è:</strong> ${new Date().toLocaleString('ru-RU')}</p>
          <p><strong>–û—à–∏–±–∫–∞:</strong> ${error.message}</p>
          <pre>${error.stack}</pre>
        `
      })
    }
    
    return NextResponse.json(
      { error: error.message },
      { status: 500 }
    )
  }
}
